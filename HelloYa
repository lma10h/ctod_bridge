3 алгоритмических интервью в среднем
тренируемся сдать 2 задачи уровня Middle (Leetcode) за 1 час, полностью, без багов и замечаний

открываем https://code.yandex-team.ru (приближаем условия к интревью)
открываем LeetCode, начните со списке Top150, потом берите другие подборки, в целом идеал это 800 задач уровня Medium
решаем,
получили AC, сверяем решение из Discuss, чтобы понять, что лучше решения нету
получили WA, стараемся в голове тест прогнать, в идеале научиться искать ошибку без подсказанного тест кейса (вот тут отлично с этим https://acm.timus.ru/problemset.aspx)
получили TL, изучаем сложность, генерируем в голове худшие случаи и смотрим, сколько времени это занимает и влезаем ли мы в сложность или временное ограничение (1 сек ~ 3*10^8)

Подробный алгоритм решения задачи  
    1) Выписать несколько наиболее типичных кейсов входных данных (тесты), убедиться с интервьюером, что условие понято верно - прописать желаемый результат для каждого кейса
    2) Придумать идею алгоритма (обычно совсем несложного)
    3) Проговорить идею, попутно понять асимптотику (линейная / nlogn / n*n)
    4) Если интервьюер говорит, что нужно еще подумать, как правило это означает, что алгоритм неоптимальный, асимптотику можно улучшить - думать дальше, проговаривать варианты, пока интервьюер не подтвердит, что найдена верная идея
    5) Затем написать сам скелет алгоритма. Использовать хорошо структурированный код, нормальные обозначения, не слишком короткие, не слишком длинные. Понятность алгоритма на этом шаге гораздо важнее оптимальности. Лучше написать без ошибок простой алгоритм в 2 прохода по массиву, чем сложный в 1 проход.
    6) Затем выписать чуть больше тестовых кейсов, включая граничные случаи (пустой вход, все нули и так далее), на них мысленно прогнать алгоритм, поправить ошибки (off-by-one), добавить при необходимости обработку в начале или конце алгоритма
    7) Если интервьюер намекает, что есть еще явные пути улучшения - попытаться понять (вначале самостоятельно), говорит ли он об ошибках, ускорении или упрощении алгоритма

взято из https://olgarudenko.notion.site/backend-c0a962dc8c554325ba14f3197a314a36

ресуры по возрастанию уровня сложности:
1) Leetcode
2) Timus
3) codeforces.com

новый ресурс: https://coderun.yandex.ru/catalog

если некому подсказать, то есть https://sp.guide
